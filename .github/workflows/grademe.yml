name: Verify Config File Command Outputs

on:
  push:
    branches:
      - main # Or your default branch
    paths:
      - '**/git-config.txt'
      - '**/mingw-config.txt'
      - '**/vscode-config.txt'
  pull_request:
    branches:
      - main # Or your default branch
    paths:
      - '**/git-config.txt'
      - '**/mingw-config.txt'
      - '**/vscode-config.txt'
  workflow_dispatch: # Allows manual trigger

jobs:
  verify_config_content:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Find and verify git-config.txt outputs
      id: git_config
      run: |
        FOUND_FILES=$(find . -name "git-config.txt" -print -quit)
        if [ -n "$FOUND_FILES" ]; then
          echo "Found git-config.txt. Verifying output of 'git -v' and 'git config list --show-origin'..."
          # Verify 'git -v' output (e.g., "git version 2.49.0.windows.1")
          # This assumes "git version" followed by a version number pattern
          if grep -Eq '\bgit version \d+(\.\d+){1,3}(\.\S+)?\b' "$FOUND_FILES"; then
            echo "git-config.txt contains 'git version' output."
            GIT_VERSION_FOUND=true
          else
            echo "git-config.txt DOES NOT contain 'git version' output."
            GIT_VERSION_FOUND=false
          fi

          # Verify 'git config list --show-origin' output
          # This looks for lines indicating file paths like "file:C:/Users/user/.gitconfig"
          if grep -Eq 'file:([A-Za-z]:[/\\]|/)[^[:space:]]+(\.gitconfig|\.git/config)' "$FOUND_FILES"; then
            echo "git-config.txt contains 'git config list --show-origin' output."
            GIT_CONFIG_FOUND=true
          else
            echo "git-config.txt DOES NOT contain 'git config list --show-origin' output."
            GIT_CONFIG_FOUND=false
          fi

          if [ "$GIT_VERSION_FOUND" = true ] && [ "$GIT_CONFIG_FOUND" = true ]; then
            echo "git_outputs_verified=true" >> "$GITHUB_OUTPUT"
          else
            echo "git_outputs_verified=false" >> "$GITHUB_OUTPUT"
            exit 1 # Fail if any expected git output is missing
          fi
        else
          echo "git-config.txt not found. Skipping verification."
          echo "git_outputs_verified=skipped" >> "$GITHUB_OUTPUT"
        fi

    - name: Find and verify mingw-config.txt outputs
      id: mingw_config
      run: |
        FOUND_FILES=$(find . -name "mingw-config.txt" -print -quit)
        if [ -n "$FOUND_FILES" ]; then
          echo "Found mingw-config.txt. Verifying output of 'gcc', 'g++', and 'gdb' versions..."
          # Verify 'gcc --version' output (e.g., "gcc (MinGW.org GCC-6.3.0-1) 6.3.0")
          if grep -Eq '\bgcc \(.*\)\s+\d+(\.\d+){1,3}\b' "$FOUND_FILES"; then
            echo "mingw-config.txt contains 'gcc --version' output."
            GCC_FOUND=true
          else
            echo "mingw-config.txt DOES NOT contain 'gcc --version' output."
            GCC_FOUND=false
          fi

          # Verify 'g++ --version' output (similar to gcc)
          if grep -Eq '\bg\+\+ \(.*\)\s+\d+(\.\d+){1,3}\b' "$FOUND_FILES"; then
            echo "mingw-config.txt contains 'g++ --version' output."
            GPLUSPLUS_FOUND=true
          else
            echo "mingw-config.txt DOES NOT contain 'g++ --version' output."
            GPLUSPLUS_FOUND=false
          fi

          # Verify 'gdb --version' output (e.g., "GNU gdb (GDB) 13.2")
          if grep -Eq '\bGNU gdb \(GDB\)\s+\d+(\.\d+){1,3}\b' "$FOUND_FILES"; then
            echo "mingw-config.txt contains 'gdb --version' output."
            GDB_FOUND=true
          else
            echo "mingw-config.txt DOES NOT contain 'gdb --version' output."
            GDB_FOUND=false
          fi

          if [ "$GCC_FOUND" = true ] && [ "$GPLUSPLUS_FOUND" = true ] && [ "$GDB_FOUND" = true ]; then
            echo "mingw_outputs_verified=true" >> "$GITHUB_OUTPUT"
          else
            echo "mingw_outputs_verified=false" >> "$GITHUB_OUTPUT"
            exit 1 # Fail if any expected mingw output is missing
          fi
        else
          echo "mingw-config.txt not found. Skipping verification."
          echo "mingw_outputs_verified=skipped" >> "$GITHUB_OUTPUT"
        fi

    - name: Find and verify vscode-config.txt output
      id: vscode_config
      run: |
        FOUND_FILES=$(find . -name "vscode-config.txt" -print -quit)
        if [ -n "$FOUND_FILES" ]; then
          echo "Found vscode-config.txt. Verifying output of 'code -v'..."
          # Regex to match VS Code version/commit/architecture (e.g., "1.99.0 4437686ffebaf200fa4a6e6e67f735f3edf24ada x64")
          if grep -Eq '\b\d+\.\d+\.\d+\s[0-9a-fA-F]{40}\s(x64|arm64|ia32)\b' "$FOUND_FILES"; then
            echo "vscode-config.txt contains the expected 'code -v' pattern."
            echo "vscode_output_verified=true" >> "$GITHUB_OUTPUT"
          else
            echo "vscode-config.txt DOES NOT contain the expected 'code -v' pattern."
            echo "vscode_output_verified=false" >> "$GITHUB_OUTPUT"
            exit 1 # Fail the step if pattern not found
          fi
        else
          echo "vscode-config.txt not found. Skipping verification."
          echo "vscode_output_verified=skipped" >> "$GITHUB_OUTPUT"
        fi

    - name: Summarize results
      run: |
        echo "--- Verification Summary ---"
        echo "git-config.txt (git -v & git config list --show-origin): ${{ steps.git_config.outputs.git_outputs_verified }}"
        echo "mingw-config.txt (gcc, g++, gdb --version): ${{ steps.mingw_config.outputs.mingw_outputs_verified }}"
        echo "vscode-config.txt (code -v): ${{ steps.vscode_config.outputs.vscode_output_verified }}"
