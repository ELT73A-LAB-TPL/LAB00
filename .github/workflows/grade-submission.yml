name: Grade Submission
# This workflow parses git and development environment configuration files to extract and grade information.

on: [push, workflow_dispatch]

jobs:
  get-config-info:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read git-config.txt and Extract Info
      id: git_info
      run: |
        GIT_CONFIG_FILE="git-config.txt"

        # Extract Git Version
        GIT_VERSION=$(grep -m 1 "git version" "$GIT_CONFIG_FILE" | awk '{print $3}')
        echo "Git Version: $GIT_VERSION"
        echo "git_version=$GIT_VERSION" >> "$GITHUB_OUTPUT"

        # Extract User Name
        GIT_USER_NAME=$(grep "user.name=" "$GIT_CONFIG_FILE" | awk -F'=' '{print $2}' | head -n 1)
        echo "Git User Name: $GIT_USER_NAME"
        echo "git_user_name=$GIT_USER_NAME" >> "$GITHUB_OUTPUT"

        # Extract User Email
        GIT_USER_EMAIL=$(grep "user.email=" "$GIT_CONFIG_FILE" | awk -F'=' '{print $2}' | head -n 1)
        echo "Git User Email: $GIT_USER_EMAIL"
        echo "git_user_email=$GIT_USER_EMAIL" >> "$GITHUB_OUTPUT"
        
    - name: Read mingw-config.txt and Extract Info
      id: mingw_info
      run: |
        MINGW_CONFIG_FILE="mingw-config.txt"

        # Extract GCC Version
        # Look for a line starting with 'gcc (' and extract the version number (e.g., 14.1.0)
        GCC_VERSION=$(grep -m 1 "^gcc (" "$MINGW_CONFIG_FILE" | awk '{print $NF}')
        echo "GCC Version: $GCC_VERSION"
        echo "gcc_version=$GCC_VERSION" >> "$GITHUB_OUTPUT"

        # Extract CMake Version
        # Look for a line starting with 'cmake version' and extract the version number (e.g., 3.28.1)
        CMAKE_VERSION=$(grep -m 1 "^cmake version" "$MINGW_CONFIG_FILE" | awk '{print $3}')
        echo "CMake Version: $CMAKE_VERSION"
        echo "cmake_version=$CMAKE_VERSION" >> "$GITHUB_OUTPUT"

        # Extract GDB Version
        # Look for a line starting with 'GNU gdb (GDB)' and extract the version number (e.g., 15.1)
        GDB_VERSION=$(grep -m 1 "^GNU gdb (GDB)" "$MINGW_CONFIG_FILE" | awk '{print $4}')
        echo "GDB Version: $GDB_VERSION"
        echo "gdb_version=$GDB_VERSION" >> "$GITHUB_OUTPUT"

    - name: Read vscode-config.txt and Extract Version
      id: vscode_info
      run: |
        VSCODE_CONFIG_FILE="vscode-config.txt"

        # Extract VS Code Version from the first line
        VSCODE_VERSION=$(head -n 1 "$VSCODE_CONFIG_FILE")
        echo "VS Code Version: $VSCODE_VERSION"
        echo "vscode_version=$VSCODE_VERSION" >> "$GITHUB_OUTPUT"

    - name: Grade Git Version
      run: |
        if [[ -n "${{ steps.git_info.outputs.git_version }}" ]]; then
          echo "Git Version Found: PASS"
          echo "git_version_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "Git Version Not Found: FAIL"
          echo "git_version_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_git_version

    - name: Grade User Name
      run: |
        if [[ -n "${{ steps.git_info.outputs.git_user_name }}" ]]; then
          echo "User Name Found: PASS"
          echo "user_name_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "User Name Not Found: FAIL"
          echo "user_name_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_user_name

    - name: Grade User Email
      run: |
        if [[ -n "${{ steps.git_info.outputs.git_user_email }}" ]]; then
          echo "User Email Found: PASS"
          echo "user_email_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "User Email Not Found: FAIL"
          echo "user_email_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_user_email

    - name: Grade GCC Version
      run: |
        if [[ -n "${{ steps.mingw_info.outputs.gcc_version }}" ]]; then
          echo "GCC Version Found: PASS"
          echo "gcc_version_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "GCC Version Not Found: FAIL"
          echo "gcc_version_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_gcc_version

    - name: Grade CMake Version
      run: |
        if [[ -n "${{ steps.mingw_info.outputs.cmake_version }}" ]]; then
          echo "CMake Version Found: PASS"
          echo "cmake_version_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "CMake Version Not Found: FAIL"
          echo "cmake_version_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_cmake_version

    - name: Grade GDB Version
      run: |
        if [[ -n "${{ steps.mingw_info.outputs.gdb_version }}" ]]; then
          echo "GDB Version Found: PASS"
          echo "gdb_version_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "GDB Version Not Found: FAIL"
          echo "gdb_version_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_gdb_version

    - name: Grade VS Code Version
      run: |
        if [[ -n "${{ steps.vscode_info.outputs.vscode_version }}" ]]; then
          echo "VS Code Version Found: PASS"
          echo "vscode_version_status=PASS" >> "$GITHUB_OUTPUT"
        else
          echo "VS Code Version Not Found: FAIL"
          echo "vscode_version_status=FAIL" >> "$GITHUB_OUTPUT"
        fi
      id: grade_vscode_version

    - name: Final Grading Summary and Score Calculation
      run: |
        TOTAL_SCORE=0

        echo "--- Grading Report ---"
        echo "Git Version Status: ${{ steps.grade_git_version.outputs.git_version_status }}"
        if [[ "${{ steps.grade_git_version.outputs.git_version_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "User Name Status: ${{ steps.grade_user_name.outputs.user_name_status }}"
        if [[ "${{ steps.grade_user_name.outputs.user_name_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "User Email Status: ${{ steps.grade_user_email.outputs.user_email_status }}"
        if [[ "${{ steps.grade_user_email.outputs.user_email_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "GCC Version Status: ${{ steps.grade_gcc_version.outputs.gcc_version_status }}"
        if [[ "${{ steps.grade_gcc_version.outputs.gcc_version_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "CMake Version Status: ${{ steps.grade_cmake_version.outputs.cmake_version_status }}"
        if [[ "${{ steps.grade_cmake_version.outputs.cmake_version_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "GDB Version Status: ${{ steps.grade_gdb_version.outputs.gdb_version_status }}"
        if [[ "${{ steps.grade_gdb_version.outputs.gdb_version_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 15))
        fi
        echo "VS Code Version Status: ${{ steps.grade_vscode_version.outputs.vscode_version_status }}"
        if [[ "${{ steps.grade_vscode_version.outputs.vscode_version_status }}" == "PASS" ]]; then
          TOTAL_SCORE=$((TOTAL_SCORE + 10))
        fi

        echo "----------------------"
        echo "Total Score: $TOTAL_SCORE / 100"
        echo "----------------------"

        # You can still include the optional job failure logic here if desired
        if [[ "${{ steps.grade_git_version.outputs.git_version_status }}" == "FAIL" || \
              "${{ steps.grade_user_name.outputs.user_name_status }}" == "FAIL" || \
              "${{ steps.grade_user_email.outputs.user_email_status }}" == "FAIL" || \
              "${{ steps.grade_gcc_version.outputs.gcc_version_status }}" == "FAIL" || \
              "${{ steps.grade_cmake_version.outputs.cmake_version_status }}" == "FAIL" || \
              "${{ steps.grade_gdb_version.outputs.gdb_version_status }}" == "FAIL" || \
              "${{ steps.grade_vscode_version.outputs.vscode_version_status }}" == "FAIL" ]]; then
          echo "One or more required configuration items were not found. Job failed."
          exit 1
        else
          echo "All required configuration items were found. Job passed."
        fi